<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [STM32G070KB_uC-Modbus\STM32G070KB_uC-Modbus.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image STM32G070KB_uC-Modbus\STM32G070KB_uC-Modbus.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Fri Sep 18 10:19:04 2020
<BR><P>
<H3>Maximum Stack Usage =        288 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; MB_OS_RxTask &rArr; MB_RxTask &rArr; MBS_RxTask &rArr; MBS_ASCII_Task &rArr; MBS_FCxx_Handler &rArr; MBS_FC06_HoldingRegWr &rArr; MB_HoldingRegWr &rArr; InFlash_Write_OneByte &rArr; InFlash_Erase_Page &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[10]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">ADC1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[10]">ADC1_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[f]">DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[d]">DMA1_Channel1_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[e]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[a]">EXTI0_1_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[b]">EXTI2_3_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[c]">EXTI4_15_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[8]">FLASH_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32g0xx_it.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[1a]">I2C1_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[1b]">I2C2_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32g0xx_it.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from stm32g0xx_it.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[9]">RCC_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[7]">RTC_TAMP_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[1c]">SPI1_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[1d]">SPI2_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from stm32g0xx_it.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from stm32g0xx_it.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[22]">SystemInit</a> from system_stm32g0xx.o(.text) referenced from startup_stm32g070xx.o(.text)
 <LI><a href="#[16]">TIM14_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[17]">TIM15_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[18]">TIM16_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[19]">TIM17_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[11]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[12]">TIM1_CC_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[13]">TIM3_IRQHandler</a> from stm32g0xx_it.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[14]">TIM6_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[15]">TIM7_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[2b]">TIMEx_DMACommutationCplt</a> from stm32g0xx_hal_tim_ex.o(.text) referenced 2 times from stm32g0xx_hal_tim.o(.text)
 <LI><a href="#[2c]">TIMEx_DMACommutationHalfCplt</a> from stm32g0xx_hal_tim_ex.o(.text) referenced 2 times from stm32g0xx_hal_tim.o(.text)
 <LI><a href="#[29]">TIM_DMACaptureCplt</a> from stm32g0xx_hal_tim.o(.text) referenced 4 times from stm32g0xx_hal_tim.o(.text)
 <LI><a href="#[2a]">TIM_DMACaptureHalfCplt</a> from stm32g0xx_hal_tim.o(.text) referenced 4 times from stm32g0xx_hal_tim.o(.text)
 <LI><a href="#[27]">TIM_DMADelayPulseCplt</a> from stm32g0xx_hal_tim.o(.text) referenced 5 times from stm32g0xx_hal_tim.o(.text)
 <LI><a href="#[28]">TIM_DMADelayPulseHalfCplt</a> from stm32g0xx_hal_tim.o(.text) referenced 5 times from stm32g0xx_hal_tim.o(.text)
 <LI><a href="#[26]">TIM_DMAError</a> from stm32g0xx_hal_tim.o(.text) referenced 10 times from stm32g0xx_hal_tim.o(.text)
 <LI><a href="#[24]">TIM_DMAPeriodElapsedCplt</a> from stm32g0xx_hal_tim.o(.text) referenced 2 times from stm32g0xx_hal_tim.o(.text)
 <LI><a href="#[25]">TIM_DMAPeriodElapsedHalfCplt</a> from stm32g0xx_hal_tim.o(.text) referenced 2 times from stm32g0xx_hal_tim.o(.text)
 <LI><a href="#[2d]">TIM_DMATriggerCplt</a> from stm32g0xx_hal_tim.o(.text) referenced from stm32g0xx_hal_tim.o(.text)
 <LI><a href="#[2e]">TIM_DMATriggerHalfCplt</a> from stm32g0xx_hal_tim.o(.text) referenced from stm32g0xx_hal_tim.o(.text)
 <LI><a href="#[40]">UART_DMAAbortOnError</a> from stm32g0xx_hal_uart.o(.text) referenced from stm32g0xx_hal_uart.o(.text)
 <LI><a href="#[39]">UART_DMAError</a> from stm32g0xx_hal_uart.o(.text) referenced 2 times from stm32g0xx_hal_uart.o(.text)
 <LI><a href="#[3a]">UART_DMAReceiveCplt</a> from stm32g0xx_hal_uart.o(.text) referenced from stm32g0xx_hal_uart.o(.text)
 <LI><a href="#[3d]">UART_DMARxAbortCallback</a> from stm32g0xx_hal_uart.o(.text) referenced from stm32g0xx_hal_uart.o(.text)
 <LI><a href="#[3b]">UART_DMARxHalfCplt</a> from stm32g0xx_hal_uart.o(.text) referenced from stm32g0xx_hal_uart.o(.text)
 <LI><a href="#[3f]">UART_DMARxOnlyAbortCallback</a> from stm32g0xx_hal_uart.o(.text) referenced from stm32g0xx_hal_uart.o(.text)
 <LI><a href="#[37]">UART_DMATransmitCplt</a> from stm32g0xx_hal_uart.o(.text) referenced from stm32g0xx_hal_uart.o(.text)
 <LI><a href="#[3c]">UART_DMATxAbortCallback</a> from stm32g0xx_hal_uart.o(.text) referenced from stm32g0xx_hal_uart.o(.text)
 <LI><a href="#[38]">UART_DMATxHalfCplt</a> from stm32g0xx_hal_uart.o(.text) referenced from stm32g0xx_hal_uart.o(.text)
 <LI><a href="#[3e]">UART_DMATxOnlyAbortCallback</a> from stm32g0xx_hal_uart.o(.text) referenced from stm32g0xx_hal_uart.o(.text)
 <LI><a href="#[34]">UART_RxISR_16BIT</a> from stm32g0xx_hal_uart.o(.text) referenced from stm32g0xx_hal_uart.o(.text)
 <LI><a href="#[35]">UART_RxISR_16BIT_FIFOEN</a> from stm32g0xx_hal_uart.o(.text) referenced from stm32g0xx_hal_uart.o(.text)
 <LI><a href="#[33]">UART_RxISR_8BIT</a> from stm32g0xx_hal_uart.o(.text) referenced from stm32g0xx_hal_uart.o(.text)
 <LI><a href="#[36]">UART_RxISR_8BIT_FIFOEN</a> from stm32g0xx_hal_uart.o(.text) referenced from stm32g0xx_hal_uart.o(.text)
 <LI><a href="#[31]">UART_TxISR_16BIT</a> from stm32g0xx_hal_uart.o(.text) referenced from stm32g0xx_hal_uart.o(.text)
 <LI><a href="#[2f]">UART_TxISR_16BIT_FIFOEN</a> from stm32g0xx_hal_uart.o(.text) referenced from stm32g0xx_hal_uart.o(.text)
 <LI><a href="#[32]">UART_TxISR_8BIT</a> from stm32g0xx_hal_uart.o(.text) referenced from stm32g0xx_hal_uart.o(.text)
 <LI><a href="#[30]">UART_TxISR_8BIT_FIFOEN</a> from stm32g0xx_hal_uart.o(.text) referenced from stm32g0xx_hal_uart.o(.text)
 <LI><a href="#[1e]">USART1_IRQHandler</a> from stm32g0xx_it.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[1f]">USART2_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[20]">USART3_4_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[6]">WWDG_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[23]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32g070xx.o(.text)
 <LI><a href="#[21]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[23]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(.text)
</UL>
<P><STRONG><a name="[197]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[41]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[196]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[198]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[199]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[19a]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[19b]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[19c]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>RTC_TAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>USART3_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[19d]"></a>delay</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_TmrInit
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_CommPortCfg
</UL>

<P><STRONG><a name="[43]"></a>SystemClock_Config</STRONG> (Thumb, 118 bytes, Stack size 72 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_SYSTICK_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ControlVoltageScaling
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21]"></a>main</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = main &rArr; MB_OS_RxTask &rArr; MB_RxTask &rArr; MBS_RxTask &rArr; MBS_ASCII_Task &rArr; MBS_FCxx_Handler &rArr; MBS_FC06_HoldingRegWr &rArr; MB_HoldingRegWr &rArr; InFlash_Write_OneByte &rArr; InFlash_Erase_Page &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_OS_RxTask
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[4a]"></a>MX_GPIO_Init</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32g0xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32g0xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USART1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32g0xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIM3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32g0xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIM3_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; MB_RTU_TmrISR_Handler &rArr; MB_RTU_TmrUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[107]"></a>HAL_MspInit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, stm32g0xx_hal_msp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[50]"></a>HAL_GPIO_Init</STRONG> (Thumb, 448 bytes, Stack size 16 bytes, stm32g0xx_hal_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_MCOConfig
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[152]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 252 bytes, Stack size 20 bytes, stm32g0xx_hal_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>

<P><STRONG><a name="[19e]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32g0xx_hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32g0xx_hal_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[15d]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g0xx_hal_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[19f]"></a>HAL_GPIO_LockPin</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32g0xx_hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>HAL_GPIO_EXTI_Falling_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[55]"></a>HAL_GPIO_EXTI_Rising_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[54]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32g0xx_hal_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Rising_Callback
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Falling_Callback
</UL>

<P><STRONG><a name="[59]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32g0xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[57]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32g0xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_TmrInit
</UL>

<P><STRONG><a name="[5a]"></a>HAL_TIM_Base_DeInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspDeInit
</UL>

<P><STRONG><a name="[1a0]"></a>HAL_TIM_Base_Start</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[1a1]"></a>HAL_TIM_Base_Stop</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32g0xx_hal_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a2]"></a>HAL_TIM_Base_Stop_IT</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>HAL_TIM_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DMAError
</UL>

<P><STRONG><a name="[26]"></a>TIM_DMAError</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32g0xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ErrorCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32g0xx_hal_tim.o(.text)
<LI> stm32g0xx_hal_tim_ex.o(.text)
</UL>
<P><STRONG><a name="[5d]"></a>HAL_TIM_PeriodElapsedHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DMAPeriodElapsedHalfCplt
</UL>

<P><STRONG><a name="[5f]"></a>HAL_TIM_Base_Start_DMA</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[61]"></a>HAL_TIM_Base_Stop_DMA</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
</UL>

<P><STRONG><a name="[64]"></a>HAL_TIM_OC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
</UL>

<P><STRONG><a name="[63]"></a>HAL_TIM_OC_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_MspInit
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>

<P><STRONG><a name="[66]"></a>HAL_TIM_OC_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DeInit
</UL>

<P><STRONG><a name="[65]"></a>HAL_TIM_OC_DeInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_MspDeInit
</UL>

<P><STRONG><a name="[68]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_Stop_DMA
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_Start_DMA
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_Stop_IT
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_Start_IT
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_Stop
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_Start
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Stop_DMA
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Start_DMA
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Stop_IT
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Start_IT
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Stop
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Start
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_Stop_IT
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_Start_IT
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_Stop
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_Start
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Stop_DMA
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Start_DMA
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Stop_IT
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Start_IT
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Stop
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Start
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop_DMA
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start_DMA
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop_IT
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start_IT
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Stop_DMA
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start_DMA
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Stop_IT
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start_IT
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Stop
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start
</UL>

<P><STRONG><a name="[67]"></a>HAL_TIM_OC_Start</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[69]"></a>HAL_TIM_OC_Stop</STRONG> (Thumb, 144 bytes, Stack size 12 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[6a]"></a>HAL_TIM_OC_Start_IT</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[6b]"></a>HAL_TIM_OC_Stop_IT</STRONG> (Thumb, 222 bytes, Stack size 12 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[6c]"></a>HAL_TIM_PWM_PulseFinishedHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DMADelayPulseHalfCplt
</UL>

<P><STRONG><a name="[28]"></a>TIM_DMADelayPulseHalfCplt</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32g0xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_DMADelayPulseHalfCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedHalfCpltCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32g0xx_hal_tim.o(.text)
<LI> stm32g0xx_hal_tim_ex.o(.text)
</UL>
<P><STRONG><a name="[6d]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DMADelayPulseCplt
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[27]"></a>TIM_DMADelayPulseCplt</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32g0xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_DMADelayPulseCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32g0xx_hal_tim.o(.text)
<LI> stm32g0xx_hal_tim_ex.o(.text)
</UL>
<P><STRONG><a name="[6e]"></a>HAL_TIM_OC_Start_DMA</STRONG> (Thumb, 444 bytes, Stack size 40 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[6f]"></a>HAL_TIM_OC_Stop_DMA</STRONG> (Thumb, 260 bytes, Stack size 16 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[71]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[70]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>

<P><STRONG><a name="[73]"></a>HAL_TIM_PWM_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_DeInit
</UL>

<P><STRONG><a name="[72]"></a>HAL_TIM_PWM_DeInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspDeInit
</UL>

<P><STRONG><a name="[74]"></a>HAL_TIM_PWM_Start</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[75]"></a>HAL_TIM_PWM_Stop</STRONG> (Thumb, 150 bytes, Stack size 12 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[76]"></a>HAL_TIM_PWM_Start_IT</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[77]"></a>HAL_TIM_PWM_Stop_IT</STRONG> (Thumb, 248 bytes, Stack size 12 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[78]"></a>HAL_TIM_PWM_Start_DMA</STRONG> (Thumb, 406 bytes, Stack size 40 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[79]"></a>HAL_TIM_PWM_Stop_DMA</STRONG> (Thumb, 260 bytes, Stack size 16 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[7b]"></a>HAL_TIM_IC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
</UL>

<P><STRONG><a name="[7a]"></a>HAL_TIM_IC_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_MspInit
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>

<P><STRONG><a name="[7d]"></a>HAL_TIM_IC_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_DeInit
</UL>

<P><STRONG><a name="[7c]"></a>HAL_TIM_IC_DeInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_MspDeInit
</UL>

<P><STRONG><a name="[7e]"></a>HAL_TIM_IC_Start</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[7f]"></a>HAL_TIM_IC_Stop</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[80]"></a>HAL_TIM_IC_Start_IT</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[81]"></a>HAL_TIM_IC_Stop_IT</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[82]"></a>HAL_TIM_IC_CaptureHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DMACaptureHalfCplt
</UL>

<P><STRONG><a name="[2a]"></a>TIM_DMACaptureHalfCplt</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32g0xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_DMACaptureHalfCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureHalfCpltCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32g0xx_hal_tim.o(.text)
<LI> stm32g0xx_hal_tim_ex.o(.text)
</UL>
<P><STRONG><a name="[83]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DMACaptureCplt
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[29]"></a>TIM_DMACaptureCplt</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32g0xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_DMACaptureCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32g0xx_hal_tim.o(.text)
<LI> stm32g0xx_hal_tim_ex.o(.text)
</UL>
<P><STRONG><a name="[84]"></a>HAL_TIM_IC_Start_DMA</STRONG> (Thumb, 350 bytes, Stack size 40 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[85]"></a>HAL_TIM_IC_Stop_DMA</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[87]"></a>HAL_TIM_OnePulse_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_Init
</UL>

<P><STRONG><a name="[86]"></a>HAL_TIM_OnePulse_Init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_MspInit
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>

<P><STRONG><a name="[89]"></a>HAL_TIM_OnePulse_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_DeInit
</UL>

<P><STRONG><a name="[88]"></a>HAL_TIM_OnePulse_DeInit</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_MspDeInit
</UL>

<P><STRONG><a name="[8a]"></a>HAL_TIM_OnePulse_Start</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[8b]"></a>HAL_TIM_OnePulse_Stop</STRONG> (Thumb, 154 bytes, Stack size 12 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[8c]"></a>HAL_TIM_OnePulse_Start_IT</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[8d]"></a>HAL_TIM_OnePulse_Stop_IT</STRONG> (Thumb, 178 bytes, Stack size 12 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[8f]"></a>HAL_TIM_Encoder_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Init
</UL>

<P><STRONG><a name="[8e]"></a>HAL_TIM_Encoder_Init</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_MspInit
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>

<P><STRONG><a name="[91]"></a>HAL_TIM_Encoder_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_DeInit
</UL>

<P><STRONG><a name="[90]"></a>HAL_TIM_Encoder_DeInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_MspDeInit
</UL>

<P><STRONG><a name="[92]"></a>HAL_TIM_Encoder_Start</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[93]"></a>HAL_TIM_Encoder_Stop</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[94]"></a>HAL_TIM_Encoder_Start_IT</STRONG> (Thumb, 166 bytes, Stack size 12 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[95]"></a>HAL_TIM_Encoder_Stop_IT</STRONG> (Thumb, 156 bytes, Stack size 12 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[96]"></a>HAL_TIM_Encoder_Start_DMA</STRONG> (Thumb, 382 bytes, Stack size 24 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[97]"></a>HAL_TIM_Encoder_Stop_DMA</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[9b]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DMATriggerCplt
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[98]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[53]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 516 bytes, Stack size 8 bytes, stm32g0xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; MB_RTU_TmrISR_Handler &rArr; MB_RTU_TmrUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_Break2Callback
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[9f]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_ConfigChannel
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[9d]"></a>HAL_TIM_OC_ConfigChannel</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC5_SetConfig
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC6_SetConfig
</UL>

<P><STRONG><a name="[a5]"></a>TIM_TI1_SetConfig</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_ConfigChannel
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>

<P><STRONG><a name="[a4]"></a>HAL_TIM_IC_ConfigChannel</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_SetConfig
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_SetConfig
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI3_SetConfig
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI4_SetConfig
</UL>

<P><STRONG><a name="[a9]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 388 bytes, Stack size 16 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC5_SetConfig
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC6_SetConfig
</UL>

<P><STRONG><a name="[aa]"></a>HAL_TIM_OnePulse_ConfigChannel</STRONG> (Thumb, 318 bytes, Stack size 56 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_SetConfig
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_SetConfig
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
</UL>

<P><STRONG><a name="[ab]"></a>HAL_TIM_TriggerHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DMATriggerHalfCplt
</UL>

<P><STRONG><a name="[ac]"></a>HAL_TIM_DMABurst_WriteStart</STRONG> (Thumb, 482 bytes, Stack size 40 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[ad]"></a>HAL_TIM_DMABurst_WriteStop</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
</UL>

<P><STRONG><a name="[ae]"></a>HAL_TIM_DMABurst_ReadStart</STRONG> (Thumb, 526 bytes, Stack size 40 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[af]"></a>HAL_TIM_DMABurst_ReadStop</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
</UL>

<P><STRONG><a name="[1a3]"></a>HAL_TIM_GenerateEvent</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stm32g0xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigOCrefClear
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SlaveTimer_SetConfig
</UL>

<P><STRONG><a name="[b0]"></a>HAL_TIM_ConfigOCrefClear</STRONG> (Thumb, 414 bytes, Stack size 20 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
</UL>

<P><STRONG><a name="[b2]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, stm32g0xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_ETR_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_TmrInit
</UL>

<P><STRONG><a name="[1a4]"></a>HAL_TIM_ConfigTI1Input</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>HAL_TIM_SlaveConfigSynchro</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SlaveTimer_SetConfig
</UL>

<P><STRONG><a name="[b9]"></a>HAL_TIM_SlaveConfigSynchro_IT</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SlaveTimer_SetConfig
</UL>

<P><STRONG><a name="[1a5]"></a>HAL_TIM_ReadCapturedValue</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[1a6]"></a>HAL_TIM_Base_GetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[1a7]"></a>HAL_TIM_OC_GetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[1a8]"></a>HAL_TIM_PWM_GetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[1a9]"></a>HAL_TIM_IC_GetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[1aa]"></a>HAL_TIM_OnePulse_GetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ab]"></a>HAL_TIM_Encoder_GetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>HAL_TIMEx_HallSensor_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_Init
</UL>

<P><STRONG><a name="[ba]"></a>HAL_TIMEx_HallSensor_Init</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, stm32g0xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_MspInit
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_SetConfig
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>

<P><STRONG><a name="[bd]"></a>HAL_TIMEx_HallSensor_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_DeInit
</UL>

<P><STRONG><a name="[bc]"></a>HAL_TIMEx_HallSensor_DeInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, stm32g0xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_MspDeInit
</UL>

<P><STRONG><a name="[be]"></a>HAL_TIMEx_HallSensor_Start</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32g0xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[bf]"></a>HAL_TIMEx_HallSensor_Stop</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32g0xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[c0]"></a>HAL_TIMEx_HallSensor_Start_IT</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32g0xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[c1]"></a>HAL_TIMEx_HallSensor_Stop_IT</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32g0xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[c2]"></a>HAL_TIMEx_HallSensor_Start_DMA</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, stm32g0xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[c3]"></a>HAL_TIMEx_HallSensor_Stop_DMA</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, stm32g0xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[c4]"></a>HAL_TIMEx_OCN_Start</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32g0xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>

<P><STRONG><a name="[c6]"></a>HAL_TIMEx_OCN_Stop</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, stm32g0xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>

<P><STRONG><a name="[c7]"></a>HAL_TIMEx_OCN_Start_IT</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, stm32g0xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>

<P><STRONG><a name="[c8]"></a>HAL_TIMEx_OCN_Stop_IT</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, stm32g0xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>

<P><STRONG><a name="[c9]"></a>HAL_TIMEx_OCN_Start_DMA</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, stm32g0xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[ca]"></a>HAL_TIMEx_OCN_Stop_DMA</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, stm32g0xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
</UL>

<P><STRONG><a name="[cb]"></a>HAL_TIMEx_PWMN_Start</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32g0xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>

<P><STRONG><a name="[cc]"></a>HAL_TIMEx_PWMN_Stop</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, stm32g0xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>

<P><STRONG><a name="[cd]"></a>HAL_TIMEx_PWMN_Start_IT</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, stm32g0xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>

<P><STRONG><a name="[ce]"></a>HAL_TIMEx_PWMN_Stop_IT</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, stm32g0xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>

<P><STRONG><a name="[cf]"></a>HAL_TIMEx_PWMN_Start_DMA</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, stm32g0xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[d0]"></a>HAL_TIMEx_PWMN_Stop_DMA</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, stm32g0xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
</UL>

<P><STRONG><a name="[d1]"></a>HAL_TIMEx_OnePulseN_Start</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stm32g0xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>

<P><STRONG><a name="[d2]"></a>HAL_TIMEx_OnePulseN_Stop</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, stm32g0xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>

<P><STRONG><a name="[d3]"></a>HAL_TIMEx_OnePulseN_Start_IT</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32g0xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>

<P><STRONG><a name="[d4]"></a>HAL_TIMEx_OnePulseN_Stop_IT</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, stm32g0xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>

<P><STRONG><a name="[1ac]"></a>HAL_TIMEx_ConfigCommutEvent</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, stm32g0xx_hal_tim_ex.o(.text), UNUSED)

<P><STRONG><a name="[1ad]"></a>HAL_TIMEx_ConfigCommutEvent_IT</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, stm32g0xx_hal_tim_ex.o(.text), UNUSED)

<P><STRONG><a name="[d5]"></a>HAL_TIMEx_CommutHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_tim_ex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMEx_DMACommutationHalfCplt
</UL>

<P><STRONG><a name="[2c]"></a>TIMEx_DMACommutationHalfCplt</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32g0xx_hal_tim_ex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMEx_DMACommutationHalfCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutHalfCpltCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32g0xx_hal_tim.o(.text)
<LI> stm32g0xx_hal_tim_ex.o(.text)
</UL>
<P><STRONG><a name="[9c]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_tim_ex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMEx_DMACommutationCplt
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[2b]"></a>TIMEx_DMACommutationCplt</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32g0xx_hal_tim_ex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMEx_DMACommutationCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32g0xx_hal_tim.o(.text)
<LI> stm32g0xx_hal_tim_ex.o(.text)
</UL>
<P><STRONG><a name="[1ae]"></a>HAL_TIMEx_ConfigCommutEvent_DMA</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, stm32g0xx_hal_tim_ex.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, stm32g0xx_hal_tim_ex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_TmrInit
</UL>

<P><STRONG><a name="[1af]"></a>HAL_TIMEx_ConfigBreakDeadTime</STRONG> (Thumb, 252 bytes, Stack size 8 bytes, stm32g0xx_hal_tim_ex.o(.text), UNUSED)

<P><STRONG><a name="[1b0]"></a>HAL_TIMEx_ConfigBreakInput</STRONG> (Thumb, 172 bytes, Stack size 36 bytes, stm32g0xx_hal_tim_ex.o(.text), UNUSED)

<P><STRONG><a name="[1b1]"></a>HAL_TIMEx_RemapConfig</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32g0xx_hal_tim_ex.o(.text), UNUSED)

<P><STRONG><a name="[1b2]"></a>HAL_TIMEx_TISelection</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, stm32g0xx_hal_tim_ex.o(.text), UNUSED)

<P><STRONG><a name="[1b3]"></a>HAL_TIMEx_GroupChannel5</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, stm32g0xx_hal_tim_ex.o(.text), UNUSED)

<P><STRONG><a name="[1b4]"></a>HAL_TIMEx_DisarmBreakInput</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, stm32g0xx_hal_tim_ex.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>HAL_TIMEx_ReArmBreakInput</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, stm32g0xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[99]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_tim_ex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[9a]"></a>HAL_TIMEx_Break2Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_tim_ex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1b5]"></a>HAL_TIMEx_HallSensor_GetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32g0xx_hal_tim_ex.o(.text), UNUSED)

<P><STRONG><a name="[d8]"></a>HAL_RCC_DeInit</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, stm32g0xx_hal_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[46]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1422 bytes, Stack size 32 bytes, stm32g0xx_hal_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_SYSTICK_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[db]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, stm32g0xx_hal_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[48]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 488 bytes, Stack size 16 bytes, stm32g0xx_hal_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_SYSTICK_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[dc]"></a>HAL_RCC_MCOConfig</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, stm32g0xx_hal_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>

<P><STRONG><a name="[de]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32g0xx_hal_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[dd]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, stm32g0xx_hal_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1b6]"></a>HAL_RCC_GetOscConfig</STRONG> (Thumb, 248 bytes, Stack size 0 bytes, stm32g0xx_hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1b7]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32g0xx_hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1b8]"></a>HAL_RCC_EnableCSS</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g0xx_hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1b9]"></a>HAL_RCC_EnableLSECSS</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32g0xx_hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1ba]"></a>HAL_RCC_DisableLSECSS</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32g0xx_hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[e1]"></a>HAL_RCC_LSECSSCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_NMI_IRQHandler
</UL>

<P><STRONG><a name="[e0]"></a>HAL_RCC_CSSCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_NMI_IRQHandler
</UL>

<P><STRONG><a name="[df]"></a>HAL_RCC_NMI_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32g0xx_hal_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_CSSCallback
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_LSECSSCallback
</UL>

<P><STRONG><a name="[e2]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, stm32g0xx_hal_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBProgram
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase_IT
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program_IT
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[e3]"></a>HAL_FLASH_Program</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, stm32g0xx_hal_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_DoubleWord
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Fast
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InFlash_Write_MultiBytes
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InFlash_Write_OneByte
</UL>

<P><STRONG><a name="[e6]"></a>HAL_FLASH_Program_IT</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, stm32g0xx_hal_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_DoubleWord
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Fast
</UL>

<P><STRONG><a name="[ea]"></a>HAL_FLASH_EndOfOperationCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_IRQHandler
</UL>

<P><STRONG><a name="[e8]"></a>HAL_FLASH_OperationErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_IRQHandler
</UL>

<P><STRONG><a name="[e7]"></a>HAL_FLASH_IRQHandler</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, stm32g0xx_hal_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_OperationErrorCallback
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_EndOfOperationCallback
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PageErase
</UL>

<P><STRONG><a name="[13f]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32g0xx_hal_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InFlash_Write_MultiBytes
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InFlash_Write_OneByte
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InFlash_Erase_Page
</UL>

<P><STRONG><a name="[140]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32g0xx_hal_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InFlash_Write_MultiBytes
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InFlash_Write_OneByte
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InFlash_Erase_Page
</UL>

<P><STRONG><a name="[1bb]"></a>HAL_FLASH_OB_Unlock</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32g0xx_hal_flash.o(.text), UNUSED)

<P><STRONG><a name="[1bc]"></a>HAL_FLASH_OB_Lock</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32g0xx_hal_flash.o(.text), UNUSED)

<P><STRONG><a name="[1bd]"></a>HAL_FLASH_OB_Launch</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32g0xx_hal_flash.o(.text), UNUSED)

<P><STRONG><a name="[1be]"></a>HAL_FLASH_GetError</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32g0xx_hal_flash.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>FLASH_PageErase</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32g0xx_hal_flash_ex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase_IT
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_IRQHandler
</UL>

<P><STRONG><a name="[eb]"></a>HAL_FLASHEx_Erase</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, stm32g0xx_hal_flash_ex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_MassErase
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PageErase
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InFlash_Erase_Page
</UL>

<P><STRONG><a name="[ed]"></a>HAL_FLASHEx_Erase_IT</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32g0xx_hal_flash_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_MassErase
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PageErase
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[ee]"></a>HAL_FLASHEx_OBProgram</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, stm32g0xx_hal_flash_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_WRPConfig
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_GetUser
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_GetRDP
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_OptrConfig
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[f3]"></a>HAL_FLASHEx_OBGetConfig</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32g0xx_hal_flash_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_GetWRP
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_GetUser
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_GetRDP
</UL>

<P><STRONG><a name="[1bf]"></a>HAL_FLASHEx_FlashEmptyCheck</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32g0xx_hal_flash_ex.o(.text), UNUSED)

<P><STRONG><a name="[1c0]"></a>HAL_FLASHEx_ForceFlashEmpty</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32g0xx_hal_flash_ex.o(.text), UNUSED)

<P><STRONG><a name="[1c1]"></a>FLASH_FlushCaches</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, stm32g0xx_hal_flash_ex.o(.text), UNUSED)

<P><STRONG><a name="[f6]"></a>HAL_DMA_Init</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, stm32g0xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcDMAMUXChannelBaseAndMask
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcDMAMUXRequestGenBaseAndMask
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[f8]"></a>HAL_DMA_DeInit</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, stm32g0xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcDMAMUXChannelBaseAndMask
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcDMAMUXRequestGenBaseAndMask
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[f9]"></a>HAL_DMA_Start</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, stm32g0xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>

<P><STRONG><a name="[60]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, stm32g0xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Start_DMA
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OCN_Start_DMA
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_Start_DMA
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_DMABurst_ReadStart
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_DMABurst_WriteStart
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Start_DMA
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Start_DMA
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start_DMA
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start_DMA
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_DMA
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
</UL>

<P><STRONG><a name="[123]"></a>HAL_DMA_Abort</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, stm32g0xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceive
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortTransmit
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Abort
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
</UL>

<P><STRONG><a name="[62]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, stm32g0xx_hal_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Stop_DMA
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OCN_Stop_DMA
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_Stop_DMA
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_DMABurst_ReadStop
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_DMABurst_WriteStop
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Stop_DMA
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Stop_DMA
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop_DMA
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Stop_DMA
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Stop_DMA
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceive_IT
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortTransmit_IT
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Abort_IT
</UL>

<P><STRONG><a name="[fb]"></a>HAL_DMA_PollForTransfer</STRONG> (Thumb, 358 bytes, Stack size 24 bytes, stm32g0xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[1c2]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, stm32g0xx_hal_dma.o(.text), UNUSED)

<P><STRONG><a name="[1c3]"></a>HAL_DMA_RegisterCallback</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, stm32g0xx_hal_dma.o(.text), UNUSED)

<P><STRONG><a name="[fc]"></a>HAL_DMA_UnRegisterCallback</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, stm32g0xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>

<P><STRONG><a name="[1c4]"></a>HAL_DMA_GetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32g0xx_hal_dma.o(.text), UNUSED)

<P><STRONG><a name="[124]"></a>HAL_DMA_GetError</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32g0xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceive
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortTransmit
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Abort
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
</UL>

<P><STRONG><a name="[1c5]"></a>HAL_PWREx_EnableBatteryCharging</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32g0xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[1c6]"></a>HAL_PWREx_DisableBatteryCharging</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g0xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[1c7]"></a>HAL_PWREx_EnableInternalWakeUpLine</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g0xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[1c8]"></a>HAL_PWREx_DisableInternalWakeUpLine</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g0xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[fd]"></a>HAL_PWREx_EnableGPIOPullUp</STRONG> (Thumb, 148 bytes, Stack size 12 bytes, stm32g0xx_hal_pwr_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>

<P><STRONG><a name="[fe]"></a>HAL_PWREx_DisableGPIOPullUp</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, stm32g0xx_hal_pwr_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>

<P><STRONG><a name="[ff]"></a>HAL_PWREx_EnableGPIOPullDown</STRONG> (Thumb, 148 bytes, Stack size 12 bytes, stm32g0xx_hal_pwr_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>

<P><STRONG><a name="[100]"></a>HAL_PWREx_DisableGPIOPullDown</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, stm32g0xx_hal_pwr_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>

<P><STRONG><a name="[1c9]"></a>HAL_PWREx_EnablePullUpPullDownConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g0xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[1ca]"></a>HAL_PWREx_DisablePullUpPullDownConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g0xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[1cb]"></a>HAL_PWREx_EnableFlashPowerDown</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32g0xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[1cc]"></a>HAL_PWREx_DisableFlashPowerDown</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32g0xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[1cd]"></a>HAL_PWREx_GetVoltageRange</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32g0xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[45]"></a>HAL_PWREx_ControlVoltageScaling</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32g0xx_hal_pwr_ex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_PWREx_ControlVoltageScaling &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1ce]"></a>HAL_PWREx_EnableLowPowerRunMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g0xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[101]"></a>HAL_PWREx_DisableLowPowerRunMode</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32g0xx_hal_pwr_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[102]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, stm32g0xx_hal_cortex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[151]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32g0xx_hal_cortex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[153]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, stm32g0xx_hal_cortex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspDeInit
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>

<P><STRONG><a name="[1cf]"></a>HAL_NVIC_SystemReset</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32g0xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[104]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32g0xx_hal_cortex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[1d0]"></a>HAL_NVIC_GetPriority</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32g0xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[1d1]"></a>HAL_NVIC_SetPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32g0xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[1d2]"></a>HAL_NVIC_GetPendingIRQ</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32g0xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[1d3]"></a>HAL_NVIC_ClearPendingIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32g0xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[1d4]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32g0xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[106]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_cortex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[105]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32g0xx_hal_cortex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>

<P><STRONG><a name="[1d5]"></a>HAL_MPU_Enable</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32g0xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[1d6]"></a>HAL_MPU_Disable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32g0xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[1d7]"></a>HAL_MPU_ConfigRegion</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, stm32g0xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[d9]"></a>HAL_InitTick</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, stm32g0xx_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_InitTick &rArr; HAL_SYSTICK_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_DeInit
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SetTickFreq
</UL>

<P><STRONG><a name="[49]"></a>HAL_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32g0xx_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_SYSTICK_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[109]"></a>HAL_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DeInit
</UL>

<P><STRONG><a name="[108]"></a>HAL_DeInit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32g0xx_hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspDeInit
</UL>

<P><STRONG><a name="[51]"></a>HAL_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g0xx_hal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[d7]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32g0xx_hal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_PollForTransfer
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_DeInit
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_ReArmBreakInput
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_StopModeWakeUpSourceConfig
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>

<P><STRONG><a name="[1d8]"></a>HAL_GetTickPrio</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32g0xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[10a]"></a>HAL_SetTickFreq</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32g0xx_hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[1d9]"></a>HAL_GetTickFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32g0xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[10b]"></a>HAL_Delay</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, stm32g0xx_hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[1da]"></a>HAL_SuspendTick</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32g0xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[1db]"></a>HAL_ResumeTick</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32g0xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[1dc]"></a>HAL_GetHalVersion</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32g0xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[1dd]"></a>HAL_GetREVID</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32g0xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[1de]"></a>HAL_GetDEVID</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32g0xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[1df]"></a>HAL_GetUIDw0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32g0xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[1e0]"></a>HAL_GetUIDw1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32g0xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[1e1]"></a>HAL_GetUIDw2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32g0xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[1e2]"></a>HAL_DBGMCU_EnableDBGStopMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32g0xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[1e3]"></a>HAL_DBGMCU_DisableDBGStopMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32g0xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[1e4]"></a>HAL_DBGMCU_EnableDBGStandbyMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32g0xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[1e5]"></a>HAL_DBGMCU_DisableDBGStandbyMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32g0xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[1e6]"></a>HAL_SYSCFG_EnableIOAnalogSwitchBooster</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g0xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[1e7]"></a>HAL_SYSCFG_DisableIOAnalogSwitchBooster</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g0xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[1e8]"></a>HAL_SYSCFG_EnableRemap</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32g0xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[1e9]"></a>HAL_SYSCFG_DisableRemap</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32g0xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[1ea]"></a>HAL_SYSCFG_StrobeDBattpinsConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32g0xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, stm32g0xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_StopModeWakeUpSourceConfig
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[10d]"></a>UART_CheckIdleState</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32g0xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MultiProcessorEx_AddressLength_Set
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RS485Ex_Init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MultiProcessor_DisableMuteMode
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MultiProcessor_EnableMuteMode
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MultiProcessor_Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LIN_Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HalfDuplex_Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[111]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 240 bytes, Stack size 0 bytes, stm32g0xx_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RS485Ex_Init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MultiProcessor_Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LIN_Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HalfDuplex_Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[10e]"></a>UART_SetConfig</STRONG> (Thumb, 1686 bytes, Stack size 40 bytes, stm32g0xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RS485Ex_Init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MultiProcessor_Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LIN_Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HalfDuplex_Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[10f]"></a>HAL_UART_Init</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, stm32g0xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_CommPortCfg
</UL>

<P><STRONG><a name="[112]"></a>HAL_HalfDuplex_Init</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, stm32g0xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[113]"></a>HAL_LIN_Init</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, stm32g0xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[114]"></a>HAL_MultiProcessor_Init</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, stm32g0xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[115]"></a>HAL_UART_DeInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32g0xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>

<P><STRONG><a name="[117]"></a>HAL_UART_Transmit</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, stm32g0xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_CommTx1
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[118]"></a>HAL_UART_Receive</STRONG> (Thumb, 354 bytes, Stack size 56 bytes, stm32g0xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[1eb]"></a>HAL_UART_Transmit_IT</STRONG> (Thumb, 214 bytes, Stack size 8 bytes, stm32g0xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 354 bytes, Stack size 8 bytes, stm32g0xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_CommTxIntEn
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[11c]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[11d]"></a>HAL_UART_TxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATxHalfCplt
</UL>

<P><STRONG><a name="[11e]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATransmitCplt
</UL>

<P><STRONG><a name="[11f]"></a>HAL_UART_Transmit_DMA</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, stm32g0xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[120]"></a>HAL_UART_RxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxHalfCplt
</UL>

<P><STRONG><a name="[121]"></a>HAL_UART_Receive_DMA</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, stm32g0xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[1ec]"></a>HAL_UART_DMAPause</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, stm32g0xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[1ed]"></a>HAL_UART_DMAResume</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, stm32g0xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[122]"></a>HAL_UART_DMAStop</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, stm32g0xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_GetError
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>

<P><STRONG><a name="[125]"></a>HAL_UART_Abort</STRONG> (Thumb, 228 bytes, Stack size 8 bytes, stm32g0xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_GetError
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>

<P><STRONG><a name="[126]"></a>HAL_UART_AbortTransmit</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, stm32g0xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_GetError
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>

<P><STRONG><a name="[127]"></a>HAL_UART_AbortReceive</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, stm32g0xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_GetError
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>

<P><STRONG><a name="[128]"></a>HAL_UART_AbortCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Abort_IT
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATxAbortCallback
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxAbortCallback
</UL>

<P><STRONG><a name="[129]"></a>HAL_UART_Abort_IT</STRONG> (Thumb, 276 bytes, Stack size 16 bytes, stm32g0xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortCpltCallback
</UL>

<P><STRONG><a name="[12a]"></a>HAL_UART_AbortTransmitCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortTransmit_IT
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATxOnlyAbortCallback
</UL>

<P><STRONG><a name="[12b]"></a>HAL_UART_AbortTransmit_IT</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, stm32g0xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortTransmitCpltCallback
</UL>

<P><STRONG><a name="[12c]"></a>HAL_UART_AbortReceiveCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceive_IT
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxOnlyAbortCallback
</UL>

<P><STRONG><a name="[12d]"></a>HAL_UART_AbortReceive_IT</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, stm32g0xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceiveCpltCallback
</UL>

<P><STRONG><a name="[52]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 590 bytes, Stack size 32 bytes, stm32g0xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_WakeupCallback
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_TxFifoEmptyCallback
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxFifoFullCallback
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[132]"></a>HAL_MultiProcessor_EnableMuteMode</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32g0xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[133]"></a>HAL_MultiProcessor_DisableMuteMode</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32g0xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[1ee]"></a>HAL_MultiProcessor_EnterMuteMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32g0xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[1ef]"></a>HAL_HalfDuplex_EnableTransmitter</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, stm32g0xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[1f0]"></a>HAL_HalfDuplex_EnableReceiver</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, stm32g0xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[1f1]"></a>HAL_LIN_SendBreak</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32g0xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[1f2]"></a>HAL_UART_GetState</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g0xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[1f3]"></a>HAL_UART_GetError</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32g0xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[134]"></a>HAL_RS485Ex_Init</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, stm32g0xx_hal_uart_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[12f]"></a>HAL_UARTEx_WakeupCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_uart_ex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[131]"></a>HAL_UARTEx_RxFifoFullCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_uart_ex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[130]"></a>HAL_UARTEx_TxFifoEmptyCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_uart_ex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[135]"></a>HAL_MultiProcessorEx_AddressLength_Set</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32g0xx_hal_uart_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[136]"></a>HAL_UARTEx_StopModeWakeUpSourceConfig</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, stm32g0xx_hal_uart_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_Wakeup_AddressConfig
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[1f4]"></a>HAL_UARTEx_EnableStopMode</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32g0xx_hal_uart_ex.o(.text), UNUSED)

<P><STRONG><a name="[1f5]"></a>HAL_UARTEx_DisableStopMode</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32g0xx_hal_uart_ex.o(.text), UNUSED)

<P><STRONG><a name="[13a]"></a>HAL_UARTEx_EnableFifoMode</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32g0xx_hal_uart_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
</UL>

<P><STRONG><a name="[150]"></a>HAL_UARTEx_DisableFifoMode</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, stm32g0xx_hal_uart_ex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_CommPortCfg
</UL>

<P><STRONG><a name="[13b]"></a>HAL_UARTEx_SetTxFifoThreshold</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32g0xx_hal_uart_ex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_UARTEx_SetTxFifoThreshold &rArr; UARTEx_SetNbDataToProcess &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_CommPortCfg
</UL>

<P><STRONG><a name="[13c]"></a>HAL_UARTEx_SetRxFifoThreshold</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, stm32g0xx_hal_uart_ex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_UARTEx_SetRxFifoThreshold &rArr; UARTEx_SetNbDataToProcess &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_CommPortCfg
</UL>

<P><STRONG><a name="[22]"></a>SystemInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, system_stm32g0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(.text)
</UL>
<P><STRONG><a name="[13d]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, system_stm32g0xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[13e]"></a>InFlash_Erase_Page</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, in_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = InFlash_Erase_Page &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InFlash_Write_MultiBytes
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InFlash_Write_OneByte
</UL>

<P><STRONG><a name="[142]"></a>InFlash_Read_OneByte</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, in_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InFlash_Read_MultiBytes
</UL>

<P><STRONG><a name="[141]"></a>InFlash_Read_MultiBytes</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, in_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = InFlash_Read_MultiBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InFlash_Read_OneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InFlash_Write_MultiBytes
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InFlash_Write_OneByte
</UL>

<P><STRONG><a name="[143]"></a>InFlash_Write_OneByte</STRONG> (Thumb, 168 bytes, Stack size 56 bytes, in_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = InFlash_Write_OneByte &rArr; InFlash_Erase_Page &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InFlash_Read_MultiBytes
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InFlash_Erase_Page
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_HoldingRegWr
</UL>

<P><STRONG><a name="[144]"></a>InFlash_Write_MultiBytes</STRONG> (Thumb, 274 bytes, Stack size 80 bytes, in_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InFlash_Read_MultiBytes
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InFlash_Erase_Page
</UL>

<P><STRONG><a name="[18c]"></a>MB_CoilRd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mb_data.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_FC01_CoilRd
</UL>

<P><STRONG><a name="[17f]"></a>MB_CoilWr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mb_data.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_FC05_CoilWr
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_FC15_CoilWrMultiple
</UL>

<P><STRONG><a name="[18a]"></a>MB_DIRd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mb_data.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_FC02_DIRd
</UL>

<P><STRONG><a name="[184]"></a>MB_InRegRd</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mb_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MB_InRegRd
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_FC04_InRegRd
</UL>

<P><STRONG><a name="[185]"></a>MB_InRegRdFP</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mb_data.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_FC04_InRegRd
</UL>

<P><STRONG><a name="[187]"></a>MB_HoldingRegRd</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mb_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MB_HoldingRegRd
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_FC03_HoldingRegRd
</UL>

<P><STRONG><a name="[188]"></a>MB_HoldingRegRdFP</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mb_data.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_FC03_HoldingRegRd
</UL>

<P><STRONG><a name="[145]"></a>MB_HoldingRegWr</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, mb_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MB_HoldingRegWr &rArr; InFlash_Write_OneByte &rArr; InFlash_Erase_Page &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InFlash_Write_OneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_FC06_HoldingRegWr
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_FC16_HoldingRegWrMultiple
</UL>

<P><STRONG><a name="[17d]"></a>MB_HoldingRegWrFP</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mb_data.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_FC06_HoldingRegWr
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_FC16_HoldingRegWrMultiple
</UL>

<P><STRONG><a name="[17b]"></a>MB_FileRd</STRONG> (Thumb, 12 bytes, Stack size 12 bytes, mb_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MB_FileRd
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_FC20_FileRd
</UL>

<P><STRONG><a name="[179]"></a>MB_FileWr</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, mb_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MB_FileWr
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_FC21_FileWr
</UL>

<P><STRONG><a name="[146]"></a>MB_OS_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mb_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MB_OS_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_InitMaster
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_InitSlave
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Init
</UL>

<P><STRONG><a name="[149]"></a>MB_OS_Exit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mb_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_ExitMaster
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_ExitSlave
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Exit
</UL>

<P><STRONG><a name="[16a]"></a>MB_OS_RxSignal</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, mb_app.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_ASCII_RxByte
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_TmrUpdate
</UL>

<P><STRONG><a name="[4e]"></a>MB_OS_RxTask</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mb_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = MB_OS_RxTask &rArr; MB_RxTask &rArr; MBS_RxTask &rArr; MBS_ASCII_Task &rArr; MBS_FCxx_Handler &rArr; MBS_FC06_HoldingRegWr &rArr; MB_HoldingRegWr &rArr; InFlash_Write_OneByte &rArr; InFlash_Erase_Page &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RxTask
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4b]"></a>ModBus_Init</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, mb_bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = ModBus_Init &rArr; MB_CfgCh &rArr; MB_CommPortCfg &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_CfgCh
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InFlash_Read_OneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14f]"></a>MB_CommPortCfg</STRONG> (Thumb, 302 bytes, Stack size 40 bytes, mb_bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = MB_CommPortCfg &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_DisableFifoMode
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_CfgCh
</UL>

<P><STRONG><a name="[110]"></a>HAL_UART_MspInit</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, mb_bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RS485Ex_Init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MultiProcessor_Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LIN_Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HalfDuplex_Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[116]"></a>HAL_UART_MspDeInit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, mb_bsp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
</UL>

<P><STRONG><a name="[119]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, mb_bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_UART_RxCpltCallback &rArr; MB_TxByte &rArr; MB_CommTx1 &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_TxByte
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RxByte
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAReceiveCplt
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
</UL>

<P><STRONG><a name="[156]"></a>fputc</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, mb_bsp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[1f6]"></a>MB_CommRxTxISR_2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mb_bsp.o(.text), UNUSED)

<P><STRONG><a name="[157]"></a>MB_CommTx1</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, mb_bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MB_CommTx1 &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_TxByte
</UL>

<P><STRONG><a name="[158]"></a>MB_CommTxIntEn</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mb_bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MB_CommTxIntEn &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Tx
</UL>

<P><STRONG><a name="[16d]"></a>MB_CommRxIntEn</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mb_bsp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_TxByte
</UL>

<P><STRONG><a name="[16c]"></a>MB_CommTxIntDis</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mb_bsp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_TxByte
</UL>

<P><STRONG><a name="[1f7]"></a>MB_CommRxIntDis</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mb_bsp.o(.text), UNUSED)

<P><STRONG><a name="[159]"></a>MB_RTU_TmrInit</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, mb_bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MB_RTU_TmrInit &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Init
</UL>

<P><STRONG><a name="[58]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, mb_bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[5b]"></a>HAL_TIM_Base_MspDeInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mb_bsp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_DeInit
</UL>

<P><STRONG><a name="[160]"></a>MB_RTU_TmrExit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mb_bsp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Exit
</UL>

<P><STRONG><a name="[15b]"></a>MB_RTU_TmrISR_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mb_bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MB_RTU_TmrISR_Handler &rArr; MB_RTU_TmrUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_TmrUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[5e]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mb_bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_PeriodElapsedCallback &rArr; MB_RTU_TmrISR_Handler &rArr; MB_RTU_TmrUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_TmrISR_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DMAPeriodElapsedCplt
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[14d]"></a>MB_Init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, mb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MB_Init &rArr; MB_RTU_TmrInit &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_StatInit
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_TmrInit
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_OS_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Init
</UL>

<P><STRONG><a name="[15f]"></a>MB_Exit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_TmrExit
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_OS_Exit
</UL>

<P><STRONG><a name="[165]"></a>MB_ChToPortMap</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_CfgCh
</UL>

<P><STRONG><a name="[164]"></a>MB_WrEnSet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_CfgCh
</UL>

<P><STRONG><a name="[163]"></a>MB_ModeSet</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, mb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_CfgCh
</UL>

<P><STRONG><a name="[162]"></a>MB_NodeAddrSet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_CfgCh
</UL>

<P><STRONG><a name="[161]"></a>MB_MasterTimeoutSet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_CfgCh
</UL>

<P><STRONG><a name="[14e]"></a>MB_CfgCh</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, mb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = MB_CfgCh &rArr; MB_CommPortCfg &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_MasterTimeoutSet
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_NodeAddrSet
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_ModeSet
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_WrEnSet
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_ChToPortMap
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_CommPortCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Init
</UL>

<P><STRONG><a name="[167]"></a>MB_RTU_TmrReset</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_TmrResetAll
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_RxByte
</UL>

<P><STRONG><a name="[166]"></a>MB_RTU_RxByte</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, mb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MB_RTU_RxByte
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_TmrReset
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RxByte
</UL>

<P><STRONG><a name="[168]"></a>MB_ASCII_RxByte</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, mb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MB_ASCII_RxByte &rArr; MB_ASCII_HexToBin
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_ASCII_HexToBin
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_OS_RxSignal
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RxByte
</UL>

<P><STRONG><a name="[154]"></a>MB_RxByte</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, mb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MB_RxByte &rArr; MB_ASCII_RxByte &rArr; MB_ASCII_HexToBin
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_ASCII_RxByte
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_RxByte
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[14c]"></a>MB_RxTask</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = MB_RxTask &rArr; MBS_RxTask &rArr; MBS_ASCII_Task &rArr; MBS_FCxx_Handler &rArr; MBS_FC06_HoldingRegWr &rArr; MB_HoldingRegWr &rArr; InFlash_Write_OneByte &rArr; InFlash_Erase_Page &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_RxTask
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_OS_RxTask
</UL>

<P><STRONG><a name="[155]"></a>MB_TxByte</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, mb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MB_TxByte &rArr; MB_CommTx1 &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_CommTxIntDis
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_CommRxIntEn
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_CommTx1
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Tx
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[16e]"></a>MB_Tx</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MB_Tx &rArr; MB_TxByte &rArr; MB_CommTx1 &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_TxByte
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_CommTxIntEn
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_Tx
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_ASCII_Tx
</UL>

<P><STRONG><a name="[16f]"></a>MB_ASCII_Rx</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, mb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MB_ASCII_Rx &rArr; MB_ASCII_HexToBin
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_ASCII_HexToBin
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_ASCII_Task
</UL>

<P><STRONG><a name="[170]"></a>MB_ASCII_Tx</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, mb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MB_ASCII_Tx &rArr; MB_Tx &rArr; MB_TxByte &rArr; MB_CommTx1 &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_ASCII_TxCalcLRC
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_ASCII_BinToHex
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_ASCII_Task
</UL>

<P><STRONG><a name="[190]"></a>MB_RTU_Rx</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, mb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MB_RTU_Rx
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_RTU_Task
</UL>

<P><STRONG><a name="[173]"></a>MB_RTU_Tx</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, mb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MB_RTU_Tx &rArr; MB_Tx &rArr; MB_TxByte &rArr; MB_CommTx1 &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_TxCalcCRC
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_RTU_Task
</UL>

<P><STRONG><a name="[175]"></a>MB_RTU_TmrResetAll</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, mb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_TmrReset
</UL>

<P><STRONG><a name="[15c]"></a>MB_RTU_TmrUpdate</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, mb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MB_RTU_TmrUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_OS_RxSignal
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_TmrISR_Handler
</UL>

<P><STRONG><a name="[171]"></a>MB_ASCII_BinToHex</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, mb_util.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_ASCII_Tx
</UL>

<P><STRONG><a name="[169]"></a>MB_ASCII_HexToBin</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, mb_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MB_ASCII_HexToBin
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_ASCII_RxCalcLRC
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_ASCII_TxCalcLRC
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_ASCII_Rx
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_ASCII_RxByte
</UL>

<P><STRONG><a name="[176]"></a>MB_ASCII_RxCalcLRC</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, mb_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MB_ASCII_RxCalcLRC &rArr; MB_ASCII_HexToBin
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_ASCII_HexToBin
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_ASCII_Task
</UL>

<P><STRONG><a name="[172]"></a>MB_ASCII_TxCalcLRC</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, mb_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MB_ASCII_TxCalcLRC &rArr; MB_ASCII_HexToBin
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_ASCII_HexToBin
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_ASCII_Tx
</UL>

<P><STRONG><a name="[191]"></a>MB_RTU_RxCalcCRC</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, mb_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MB_RTU_RxCalcCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_RTU_Task
</UL>

<P><STRONG><a name="[174]"></a>MB_RTU_TxCalcCRC</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, mb_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MB_RTU_TxCalcCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_Tx
</UL>

<P><STRONG><a name="[15e]"></a>MBS_StatInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mbs_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_FC10_writes
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_FC08_Loopback
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_Init
</UL>

<P><STRONG><a name="[18d]"></a>MBS_FCxx_Handler</STRONG> (Thumb, 268 bytes, Stack size 16 bytes, mbs_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = MBS_FCxx_Handler &rArr; MBS_FC06_HoldingRegWr &rArr; MB_HoldingRegWr &rArr; InFlash_Write_OneByte &rArr; InFlash_Erase_Page &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_FC01_CoilRd
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_FC02_DIRd
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_FC03_HoldingRegRd
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_FC04_InRegRd
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_FC05_CoilWr
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_FC06_HoldingRegWr
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_FC08_Loopback
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_FC15_CoilWrMultiple
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_FC16_HoldingRegWrMultiple
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_FC20_FileRd
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_FC21_FileWr
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_ErrRespSet
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_ASCII_Task
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_RTU_Task
</UL>

<P><STRONG><a name="[16b]"></a>MBS_RxTask</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mbs_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = MBS_RxTask &rArr; MBS_ASCII_Task &rArr; MBS_FCxx_Handler &rArr; MBS_FC06_HoldingRegWr &rArr; MB_HoldingRegWr &rArr; InFlash_Write_OneByte &rArr; InFlash_Erase_Page &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_ASCII_Task
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_RTU_Task
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RxTask
</UL>

<P><STRONG><a name="[1f8]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[da]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_DisableLowPowerRunMode
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcDMAMUXChannelBaseAndMask
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ControlVoltageScaling
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_CfgCh
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1f9]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[139]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_FC16_HoldingRegWrMultiple
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
</UL>

<P><STRONG><a name="[194]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1fa]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1fb]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[193]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[44]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[1fc]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[195]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[42]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1fd]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32g0xx_hal_tim.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_DisableGPIOPullDown
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableGPIOPullDown
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_DisableGPIOPullUp
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableGPIOPullUp
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_UnRegisterCallback
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SlaveTimer_SetConfig
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_FCxx_Handler
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_CommPortCfg
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_HoldingRegWr
</UL>

<P><STRONG><a name="[1fe]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1ff]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[200]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[25]"></a>TIM_DMAPeriodElapsedHalfCplt</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32g0xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_DMAPeriodElapsedHalfCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g0xx_hal_tim.o(.text)
</UL>
<P><STRONG><a name="[24]"></a>TIM_DMAPeriodElapsedCplt</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32g0xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIM_DMAPeriodElapsedCplt &rArr; HAL_TIM_PeriodElapsedCallback &rArr; MB_RTU_TmrISR_Handler &rArr; MB_RTU_TmrUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g0xx_hal_tim.o(.text)
</UL>
<P><STRONG><a name="[a3]"></a>TIM_OC6_SetConfig</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[a2]"></a>TIM_OC5_SetConfig</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[a1]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[a0]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[9e]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_ConfigChannel
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[a8]"></a>TIM_TI4_SetConfig</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>

<P><STRONG><a name="[a7]"></a>TIM_TI3_SetConfig</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>

<P><STRONG><a name="[a6]"></a>TIM_TI2_SetConfig</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_ConfigChannel
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>

<P><STRONG><a name="[2e]"></a>TIM_DMATriggerHalfCplt</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32g0xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_DMATriggerHalfCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g0xx_hal_tim.o(.text)
</UL>
<P><STRONG><a name="[2d]"></a>TIM_DMATriggerCplt</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32g0xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_DMATriggerCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g0xx_hal_tim.o(.text)
</UL>
<P><STRONG><a name="[b4]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32g0xx_hal_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[b3]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32g0xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SlaveTimer_SetConfig
</UL>

<P><STRONG><a name="[b5]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32g0xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SlaveTimer_SetConfig
</UL>

<P><STRONG><a name="[b6]"></a>TIM_SlaveTimer_SetConfig</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, stm32g0xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_SlaveConfigSynchro_IT
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_SlaveConfigSynchro
</UL>

<P><STRONG><a name="[c5]"></a>TIM_CCxNChannelCmd</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stm32g0xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OnePulseN_Stop_IT
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OnePulseN_Start_IT
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OnePulseN_Stop
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OnePulseN_Start
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Stop_DMA
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Start_DMA
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Stop_IT
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Start_IT
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Stop
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Start
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OCN_Stop_DMA
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OCN_Start_DMA
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OCN_Stop_IT
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OCN_Start_IT
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OCN_Stop
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OCN_Start
</UL>

<P><STRONG><a name="[e5]"></a>FLASH_Program_Fast</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, stm32g0xx_hal_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLASH_Program_Fast
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program_IT
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[e4]"></a>FLASH_Program_DoubleWord</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32g0xx_hal_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_Program_DoubleWord
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program_IT
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[ec]"></a>FLASH_MassErase</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32g0xx_hal_flash_ex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase_IT
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[f0]"></a>FLASH_OB_OptrConfig</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, stm32g0xx_hal_flash_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBProgram
</UL>

<P><STRONG><a name="[f2]"></a>FLASH_OB_GetRDP</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32g0xx_hal_flash_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBGetConfig
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBProgram
</UL>

<P><STRONG><a name="[f1]"></a>FLASH_OB_GetUser</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g0xx_hal_flash_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBGetConfig
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBProgram
</UL>

<P><STRONG><a name="[ef]"></a>FLASH_OB_WRPConfig</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32g0xx_hal_flash_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBProgram
</UL>

<P><STRONG><a name="[f4]"></a>FLASH_OB_GetWRP</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32g0xx_hal_flash_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBGetConfig
</UL>

<P><STRONG><a name="[f7]"></a>DMA_CalcDMAMUXRequestGenBaseAndMask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32g0xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[f5]"></a>DMA_CalcDMAMUXChannelBaseAndMask</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32g0xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[fa]"></a>DMA_SetConfig</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32g0xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[103]"></a>__NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, stm32g0xx_hal_cortex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[32]"></a>UART_TxISR_8BIT</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32g0xx_hal_uart.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32g0xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[31]"></a>UART_TxISR_16BIT</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, stm32g0xx_hal_uart.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32g0xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[30]"></a>UART_TxISR_8BIT_FIFOEN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, stm32g0xx_hal_uart.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32g0xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[2f]"></a>UART_TxISR_16BIT_FIFOEN</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, stm32g0xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_TxISR_16BIT_FIFOEN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g0xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[33]"></a>UART_RxISR_8BIT</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32g0xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = UART_RxISR_8BIT &rArr; HAL_UART_RxCpltCallback &rArr; MB_TxByte &rArr; MB_CommTx1 &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g0xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[34]"></a>UART_RxISR_16BIT</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, stm32g0xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = UART_RxISR_16BIT &rArr; HAL_UART_RxCpltCallback &rArr; MB_TxByte &rArr; MB_CommTx1 &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g0xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[36]"></a>UART_RxISR_8BIT_FIFOEN</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, stm32g0xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = UART_RxISR_8BIT_FIFOEN &rArr; HAL_UART_RxCpltCallback &rArr; MB_TxByte &rArr; MB_CommTx1 &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g0xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[35]"></a>UART_RxISR_16BIT_FIFOEN</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, stm32g0xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = UART_RxISR_16BIT_FIFOEN &rArr; HAL_UART_RxCpltCallback &rArr; MB_TxByte &rArr; MB_CommTx1 &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g0xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[11b]"></a>UART_EndRxTransfer</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32g0xx_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[11a]"></a>UART_EndTxTransfer</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32g0xx_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[39]"></a>UART_DMAError</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, stm32g0xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g0xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[38]"></a>UART_DMATxHalfCplt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32g0xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMATxHalfCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g0xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[37]"></a>UART_DMATransmitCplt</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32g0xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMATransmitCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g0xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[3b]"></a>UART_DMARxHalfCplt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32g0xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMARxHalfCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g0xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[3a]"></a>UART_DMAReceiveCplt</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32g0xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = UART_DMAReceiveCplt &rArr; HAL_UART_RxCpltCallback &rArr; MB_TxByte &rArr; MB_CommTx1 &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g0xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[3d]"></a>UART_DMARxAbortCallback</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32g0xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMARxAbortCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g0xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[3c]"></a>UART_DMATxAbortCallback</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32g0xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMATxAbortCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g0xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[3e]"></a>UART_DMATxOnlyAbortCallback</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32g0xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMATxOnlyAbortCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortTransmitCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g0xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[3f]"></a>UART_DMARxOnlyAbortCallback</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, stm32g0xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMARxOnlyAbortCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceiveCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g0xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[12e]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32g0xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_EndTransmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[40]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, stm32g0xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g0xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[137]"></a>UARTEx_Wakeup_AddressConfig</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stm32g0xx_hal_uart_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_StopModeWakeUpSourceConfig
</UL>

<P><STRONG><a name="[138]"></a>UARTEx_SetNbDataToProcess</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, stm32g0xx_hal_uart_ex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = UARTEx_SetNbDataToProcess &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_EnableFifoMode
</UL>

<P><STRONG><a name="[148]"></a>MB_InitSlave</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mb_app.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_OS_Init
</UL>

<P><STRONG><a name="[147]"></a>MB_InitMaster</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mb_app.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_OS_Init
</UL>

<P><STRONG><a name="[14b]"></a>MB_ExitSlave</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mb_app.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_OS_Exit
</UL>

<P><STRONG><a name="[14a]"></a>MB_ExitMaster</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mb_app.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_OS_Exit
</UL>

<P><STRONG><a name="[178]"></a>MBS_ErrRespSet</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, mbs_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_FCxx_Handler
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_FC10_writes
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_FC01_CoilRd
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_FC02_DIRd
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_FC03_HoldingRegRd
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_FC04_InRegRd
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_FC05_CoilWr
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_FC06_HoldingRegWr
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_FC08_Loopback
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_FC15_CoilWrMultiple
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_FC16_HoldingRegWrMultiple
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_FC20_FileRd
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_FC21_FileWr
</UL>

<P><STRONG><a name="[177]"></a>MBS_FC21_FileWr</STRONG> (Thumb, 374 bytes, Stack size 64 bytes, mbs_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MBS_FC21_FileWr &rArr; MB_FileWr
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_ErrRespSet
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_FileWr
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_FCxx_Handler
</UL>

<P><STRONG><a name="[17a]"></a>MBS_FC20_FileRd</STRONG> (Thumb, 356 bytes, Stack size 48 bytes, mbs_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MBS_FC20_FileRd &rArr; MB_FileRd
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_ErrRespSet
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_FileRd
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_FCxx_Handler
</UL>

<P><STRONG><a name="[17c]"></a>MBS_FC16_HoldingRegWrMultiple</STRONG> (Thumb, 456 bytes, Stack size 48 bytes, mbs_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = MBS_FC16_HoldingRegWrMultiple &rArr; MB_HoldingRegWr &rArr; InFlash_Write_OneByte &rArr; InFlash_Erase_Page &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_ErrRespSet
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_HoldingRegWrFP
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_HoldingRegWr
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_FCxx_Handler
</UL>

<P><STRONG><a name="[17e]"></a>MBS_FC15_CoilWrMultiple</STRONG> (Thumb, 376 bytes, Stack size 40 bytes, mbs_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MBS_FC15_CoilWrMultiple
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_ErrRespSet
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_CoilWr
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_FCxx_Handler
</UL>

<P><STRONG><a name="[180]"></a>MBS_FC08_Loopback</STRONG> (Thumb, 370 bytes, Stack size 16 bytes, mbs_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MBS_FC08_Loopback
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_ErrRespSet
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_StatInit
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_FCxx_Handler
</UL>

<P><STRONG><a name="[181]"></a>MBS_FC06_HoldingRegWr</STRONG> (Thumb, 310 bytes, Stack size 48 bytes, mbs_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = MBS_FC06_HoldingRegWr &rArr; MB_HoldingRegWr &rArr; InFlash_Write_OneByte &rArr; InFlash_Erase_Page &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_ErrRespSet
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_HoldingRegWrFP
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_HoldingRegWr
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_FCxx_Handler
</UL>

<P><STRONG><a name="[182]"></a>MBS_FC05_CoilWr</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, mbs_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MBS_FC05_CoilWr
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_ErrRespSet
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_CoilWr
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_FCxx_Handler
</UL>

<P><STRONG><a name="[183]"></a>MBS_FC04_InRegRd</STRONG> (Thumb, 374 bytes, Stack size 48 bytes, mbs_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MBS_FC04_InRegRd &rArr; MB_InRegRd
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_ErrRespSet
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_InRegRdFP
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_InRegRd
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_FCxx_Handler
</UL>

<P><STRONG><a name="[186]"></a>MBS_FC03_HoldingRegRd</STRONG> (Thumb, 382 bytes, Stack size 48 bytes, mbs_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MBS_FC03_HoldingRegRd &rArr; MB_HoldingRegRd
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_ErrRespSet
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_HoldingRegRdFP
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_HoldingRegRd
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_FCxx_Handler
</UL>

<P><STRONG><a name="[189]"></a>MBS_FC02_DIRd</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, mbs_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MBS_FC02_DIRd
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_ErrRespSet
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_DIRd
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_FCxx_Handler
</UL>

<P><STRONG><a name="[18b]"></a>MBS_FC01_CoilRd</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, mbs_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MBS_FC01_CoilRd
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_ErrRespSet
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_CoilRd
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_FCxx_Handler
</UL>

<P><STRONG><a name="[18e]"></a>MBS_FC10_writes</STRONG> (Thumb, 376 bytes, Stack size 16 bytes, mbs_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_ErrRespSet
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_StatInit
</UL>

<P><STRONG><a name="[18f]"></a>MBS_RTU_Task</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, mbs_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = MBS_RTU_Task &rArr; MBS_FCxx_Handler &rArr; MBS_FC06_HoldingRegWr &rArr; MB_HoldingRegWr &rArr; InFlash_Write_OneByte &rArr; InFlash_Erase_Page &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_FCxx_Handler
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_RxCalcCRC
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_Tx
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_RTU_Rx
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_RxTask
</UL>

<P><STRONG><a name="[192]"></a>MBS_ASCII_Task</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, mbs_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = MBS_ASCII_Task &rArr; MBS_FCxx_Handler &rArr; MBS_FC06_HoldingRegWr &rArr; MB_HoldingRegWr &rArr; InFlash_Write_OneByte &rArr; InFlash_Erase_Page &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_FCxx_Handler
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_ASCII_RxCalcLRC
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_ASCII_Tx
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_ASCII_Rx
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_RxTask
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
